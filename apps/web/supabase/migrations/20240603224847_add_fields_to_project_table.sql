create table "public"."project_table" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "account_id" uuid not null ,
    "project_name" text not null,
    "title" text not null,
    "platform" text not null,
    "topic" text not null,
    "subtopic" text,
    "state" boolean not null default true,
    "mode" text not null,
    "start_date" timestamp with time zone not null,
    "end_date" timestamp with time zone not null,
    "created_by" uuid not null ,
    "updated_by" uuid not null
);


alter table "public"."project_table" enable row level security;

CREATE UNIQUE INDEX project_table_pkey ON public.project_table USING btree (id);

alter table "public"."project_table" add constraint "project_table_pkey" PRIMARY KEY using index "project_table_pkey";

alter table "public"."project_table" add constraint "public_project_table_account_id_fkey" FOREIGN KEY (account_id) REFERENCES accounts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."project_table" validate constraint "public_project_table_account_id_fkey";

alter table "public"."project_table" add constraint "public_project_table_created_by_fkey" FOREIGN KEY (created_by) REFERENCES accounts(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."project_table" validate constraint "public_project_table_created_by_fkey";

grant delete on table "public"."project_table" to "anon";

grant insert on table "public"."project_table" to "anon";

grant references on table "public"."project_table" to "anon";

grant select on table "public"."project_table" to "anon";

grant trigger on table "public"."project_table" to "anon";

grant truncate on table "public"."project_table" to "anon";

grant update on table "public"."project_table" to "anon";

grant delete on table "public"."project_table" to "authenticated";

grant insert on table "public"."project_table" to "authenticated";

grant references on table "public"."project_table" to "authenticated";

grant select on table "public"."project_table" to "authenticated";

grant trigger on table "public"."project_table" to "authenticated";

grant truncate on table "public"."project_table" to "authenticated";

grant update on table "public"."project_table" to "authenticated";

grant delete on table "public"."project_table" to "service_role";

grant insert on table "public"."project_table" to "service_role";

grant references on table "public"."project_table" to "service_role";

grant select on table "public"."project_table" to "service_role";

grant trigger on table "public"."project_table" to "service_role";

grant truncate on table "public"."project_table" to "service_role";

grant update on table "public"."project_table" to "service_role";

-- CREATE TRIGGER accounts_teardown AFTER DELETE ON public.accounts FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://host.docker.internal:3000/api/db/webhook', 'POST', '{"Content-Type":"application/json", "X-Supabase-Event-Signature":"WEBHOOKSECRET"}', '{}', '5000');

-- CREATE TRIGGER invitations_insert AFTER INSERT ON public.invitations FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://host.docker.internal:3000/api/db/webhook', 'POST', '{"Content-Type":"application/json", "X-Supabase-Event-Signature":"WEBHOOKSECRET"}', '{}', '5000');

-- CREATE TRIGGER subscriptions_delete AFTER DELETE ON public.subscriptions FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://host.docker.internal:3000/api/db/webhook', 'POST', '{"Content-Type":"application/json", "X-Supabase-Event-Signature":"WEBHOOKSECRET"}', '{}', '5000');


