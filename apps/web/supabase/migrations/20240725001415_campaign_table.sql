create table "public"."campaign_table" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "pName" text,
    "pMainTopic" text,
    "pSubTopic" text,
    "pMode" text,
    "pState" boolean,
    "pStartDate" date,
    "pEndDate" date,
    "pPlatform" text,
    "pPlatformurl" text,
    "pCnt" bigint,
    "pAtmosphere" text,
    "pPostMode" text,
    "pTitle" text,
    "pTextContent" text,
    "pGeneratedTitles" text,
    "pImages" text,
    "pImageBrand" text,
    "pImageFormat" text,
    "pImageCnt" bigint,
    "pImageRatio" text,
    "pUseText" boolean,
    "pUseImage" boolean,
    "pUseVideo" boolean,
    "pUserId" uuid default auth.uid()
);



CREATE UNIQUE INDEX campaign_table_pkey ON public.campaign_table USING btree (id);

alter table "public"."campaign_table" add constraint "campaign_table_pkey" PRIMARY KEY using index "campaign_table_pkey";

alter table "public"."campaign_table" add constraint "public_campaign_table_pUserId_fkey" FOREIGN KEY ("pUserId") REFERENCES accounts(id) not valid;

alter table "public"."campaign_table" validate constraint "public_campaign_table_pUserId_fkey";

grant delete on table "public"."campaign_table" to "anon";

grant insert on table "public"."campaign_table" to "anon";

grant references on table "public"."campaign_table" to "anon";

grant select on table "public"."campaign_table" to "anon";

grant trigger on table "public"."campaign_table" to "anon";

grant truncate on table "public"."campaign_table" to "anon";

grant update on table "public"."campaign_table" to "anon";

grant delete on table "public"."campaign_table" to "authenticated";

grant insert on table "public"."campaign_table" to "authenticated";

grant references on table "public"."campaign_table" to "authenticated";

grant select on table "public"."campaign_table" to "authenticated";

grant trigger on table "public"."campaign_table" to "authenticated";

grant truncate on table "public"."campaign_table" to "authenticated";

grant update on table "public"."campaign_table" to "authenticated";

grant delete on table "public"."campaign_table" to "service_role";

grant insert on table "public"."campaign_table" to "service_role";

grant references on table "public"."campaign_table" to "service_role";

grant select on table "public"."campaign_table" to "service_role";

grant trigger on table "public"."campaign_table" to "service_role";

grant truncate on table "public"."campaign_table" to "service_role";

grant update on table "public"."campaign_table" to "service_role";

-- CREATE TRIGGER accounts_teardown AFTER DELETE ON public.accounts FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://host.docker.internal:3000/api/db/webhook', 'POST', '{"Content-Type":"application/json", "X-Supabase-Event-Signature":"WEBHOOKSECRET"}', '{}', '5000');

-- CREATE TRIGGER invitations_insert AFTER INSERT ON public.invitations FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://host.docker.internal:3000/api/db/webhook', 'POST', '{"Content-Type":"application/json", "X-Supabase-Event-Signature":"WEBHOOKSECRET"}', '{}', '5000');

-- CREATE TRIGGER subscriptions_delete AFTER DELETE ON public.subscriptions FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('http://host.docker.internal:3000/api/db/webhook', 'POST', '{"Content-Type":"application/json", "X-Supabase-Event-Signature":"WEBHOOKSECRET"}', '{}', '5000');


